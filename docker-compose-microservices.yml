version: '3.8'

services:
  api-gateway:
    build: ./api-gateway1
    container_name: api-gateway
    ports:
      - "8080:8080"
    environment:
      - SERVER_PORT=8080
      - SPRING_PROFILES_ACTIVE=docker
      - STAKEHOLDERS_SERVICE_URL=http://service-stakeholders:8081
      - GRPC_STAKEHOLDERS_HOST=service-stakeholders
      - GRPC_STAKEHOLDERS_PORT=9091
      - EUREKA_CLIENT_ENABLED=false
    depends_on:
      - service-stakeholders
      - service-tours
      - service-blog
      - service-follower
    networks:
      - soa-network

  service-stakeholders:
    build: ./service-stakeholders
    container_name: service-stakeholders
    ports:
      - "8081:8081"
      - "9091:9091"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://host.docker.internal:5432/stakeholders
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=super
      - SERVER_PORT=8081
      - GRPC_SERVER_PORT=9091
      - EUREKA_CLIENT_ENABLED=false
      - JWT_SECRET=YjNkJmYtN2U5YS00ZDYyLWI5YjMtY2M3YzY3YjM4ZjZlNzY1ODFhNDctZWI0ZS00ZmY4LWE0YWMtMGI0ZTIzOWQwZWY1
      - JWT_EXPIRATION=86400000
    depends_on:
      - postgres-stakeholders
    networks:
      - soa-network

  service-tours:
    build: ./service-tours
    container_name: service-tours
    ports:
      - "8083:8083"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://host.docker.internal:5432/tours
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=super
      - SERVER_PORT=8083
      - GRPC_CLIENT_STAKEHOLDERS-SERVICE_ADDRESS=static://service-stakeholders:9091
      - GRPC_CLIENT_STAKEHOLDERS-SERVICE_NEGOTIATIONTYPE=PLAINTEXT
      - EUREKA_CLIENT_ENABLED=false
    depends_on:
      - postgres-tours
      - service-stakeholders
    networks:
      - soa-network

  service-blog:
    build: ./service-blog
    container_name: service-blog
    ports:
      - "8084:8084"
    environment:
      - PORT=8084
      - DATABASE_URL=postgres://postgres:super@host.docker.internal:5435/blog?sslmode=disable
    depends_on:
      - postgres-blog
    networks:
      - soa-network

  service-follower:
    build: ./service-follower
    container_name: service-follower
    ports:
      - "8085:8085"
    environment:
      - PORT=8085
      - DATABASE_URL=postgres://postgres:super@host.docker.internal:5436/follower?sslmode=disable
    depends_on:
      - postgres-follower
    networks:
      - soa-network

  postgres-stakeholders:
    image: postgres:15
    container_name: postgres-stakeholders
    environment:
      - POSTGRES_DB=stakeholders
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=super
    ports:
      - "5433:5432"
    volumes:
      - postgres_stakeholders_data:/var/lib/postgresql/data
    networks:
      - soa-network

  postgres-tours:
    image: postgres:15
    container_name: postgres-tours
    environment:
      - POSTGRES_DB=tours
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=super
    ports:
      - "5432:5432"
    volumes:
      - postgres_tours_data:/var/lib/postgresql/data
    networks:
      - soa-network

  postgres-blog:
    image: postgres:15
    container_name: postgres-blog
    environment:
      - POSTGRES_DB=blog
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=super
    ports:
      - "5435:5432"
    volumes:
      - postgres_blog_data:/var/lib/postgresql/data
    networks:
      - soa-network

  postgres-follower:
    image: postgres:15
    container_name: postgres-follower
    environment:
      - POSTGRES_DB=follower
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=super
    ports:
      - "5436:5432"
    volumes:
      - postgres_follower_data:/var/lib/postgresql/data
    networks:
      - soa-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command: --config.file=/etc/prometheus/prometheus.yml
    networks:
      - monitor-net

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"
    networks:
      - monitor-net

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8888:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - monitor-net

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - loki-data:/loki
    networks:
      - monitor-net

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    volumes:
      - /var/log:/var/log
      - ./monitoring/promtail:/etc/promtail
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/promtail.yml
    networks:
      - monitor-net

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    ports:
      - "6831:6831/udp"
      - "16686:16686"
      - "9411:9411"
    networks:
      - monitor-net

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - monitor-net

volumes:
  postgres_stakeholders_data:
  postgres_tours_data:
  postgres_blog_data:
  postgres_follower_data:
  prometheus-data:
  grafana-data:
  loki-data:
  jaeger-data:

networks:
  soa-network:
    driver: bridge
  monitor-net:
    driver: bridge
